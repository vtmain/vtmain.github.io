<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[C++基础知识点]]></title>
      <url>/2017/05/17/cpp-base-knowledge-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
<ol>
<li>继承，多态，虚函数表</li>
<li>内存对齐</li>
<li>stl</li>
<li>static/const 声明周期</li>
<li>new/delete  malloc/free</li>
</ol>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多态 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程空间]]></title>
      <url>/2017/05/17/os-process-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
<ul>
<li><p>进程空间分布图  </p>
</li>
<li><p>栈区/堆区/代码区/全局变量区<br>1.代码段(code或text)<br>　　代码段由各个函数产生，函数的每一个语句将最终经过编绎和汇编生成二进制机器代码(具体生生哪种体系结构的机器代码由编译器决定)。<br>2.只读数据段(RO Data)<br>　　只读数据段的特点是在运行中不需要改变。只读全局变量，只读局部变量，程序中使用的常量等会在编译时被放入到只读数据区。<br>3.读写数据段(RW Data)<br>　　读写数据段又称已初始化数据段，表示可以读也可以写的数据区。通常已初始化的全局变量和局部静态变量被放在了读写数据段，如：在函数中定义static char b[ 100]={“ABCDEFG”};读写数据区的特点是必须在程序经过初始化，如果只定义，没初始值，则不会生成读写数据区，而会定位为未初始化数据区(BSS)。<br>4.未初始化数据段(BSS)<br>　　该段中的数据没有经过初始化，不是目标文件中的一段。未初始化数据段只在运行的初始化阶段才会产生，因此它的大小不会影响目标文件的大小。<br>5.堆(heap)<br>　　堆内存只在程序运行时出现，一般由程序员分配和释放（malloc、free）。分配内存的函数所分配的内存空间在堆上，程序必须保证使用free释放，否则会发生内存泄漏。<br>6.栈(stack)<br>　　栈内存只在程序运行时出现，在函数内部使用的变量、函数的参数以及返回值将使用栈空间，栈空间由编译器自动分配和释放  </p>
</li>
</ul>
<p>demo<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区，。rw data段</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> b=<span class="number">20</span>; <span class="comment">//全局初始化区，。 rw data段</span></div><div class="line"><span class="keyword">char</span> *p1; <span class="comment">//全局未初始化区 .bss段</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> A = <span class="number">10</span>; <span class="comment">//.rodata段</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> b; <span class="comment">// 栈</span></div><div class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>; <span class="comment">//栈</span></div><div class="line">    <span class="keyword">char</span> *p2; <span class="comment">//栈</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">0</span>; <span class="comment">//全局(静态)初始化区 .rw data段</span></div><div class="line">    <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>; <span class="comment">//123456\0在常量区ro data，p3 在栈上。</span></div><div class="line">    p1 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);<span class="comment">//分配得来的10和20个字节的区域就在堆区</span></div><div class="line">    p2 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</div><div class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123456"</span>); <span class="comment">//123456\0 在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方</span></div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p1);</div><div class="line">    <span class="built_in">free</span>(p2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总结：<br>1.代码段、RO Data、RW Data及BSS这四个段都属于程序中的静态区域，堆和栈属于程序的动态区域；<br>2.C程序经过编译连接生产的二进制可执行代码，只包含代码段、RO Data、RW Data，在程序运行后才会包含后面两个段，BSS中的数据将会在运行前置0；<br>3.使用const定义的变量将放于程序的只读数据区；<br>4.函数体中定义的变量通常是在栈上，不需要在程序中进行管理，由编绎器处理。</p>
<ul>
<li>线程加载，线程栈</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zip格式分析及comment提取]]></title>
      <url>/2017/05/17/zip-format-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
]]></content>
      
        
        <tags>
            
            <tag> zip </tag>
            
            <tag> EOCD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tcp socket实现]]></title>
      <url>/2017/05/17/socket-communication-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
]]></content>
      
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spine中的骨骼实现原理]]></title>
      <url>/2017/05/17/spine-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> Gamedev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JNI环境分析]]></title>
      <url>/2017/05/17/jni-environment-1/</url>
      <content type="html"><![CDATA[<p>占坑<br><a id="more"></a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN服务器搭建/ubuntu-14.04]]></title>
      <url>/2017/05/16/svn-server-ubuntu14/</url>
      <content type="html"><![CDATA[<p>系统环境 Ubuntu 14.04, svn server建立过程<br><a id="more"></a></p>
<ol>
<li><p>安装svn</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install subversion</div></pre></td></tr></table></figure>
</li>
<li><p>创建代码仓库</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svnadmin create /home/svn/project</div><div class="line"><span class="built_in">cd</span> project</div><div class="line">ls</div></pre></td></tr></table></figure>
</li>
<li><p>修改文件执行权限</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x /home/svn/project/conf/authz</div><div class="line">chmod +x /home/svn/project/conf/passwd</div><div class="line">chmod +x /home/svn/project/conf/svnserve.conf</div></pre></td></tr></table></figure>
</li>
<li><p>配置权限</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim /home/svn/project/conf/svnserve.conf</div><div class="line"></div><div class="line">// 以下项取消注释</div><div class="line">anon-access=none</div><div class="line">auth-access=write</div><div class="line">password-db=passwd</div><div class="line">authz-db=authz</div></pre></td></tr></table></figure>
</li>
<li><p>配置账户和密码</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /home/svn/project/conf/passwd</div><div class="line"></div><div class="line">[user]</div><div class="line">user=<span class="number">123456</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动/查看/终止服务</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svnserve -d -r /home/svn/project/</div><div class="line">sudo netstat -antp|grep svnserve</div><div class="line">pkill svnserve</div></pre></td></tr></table></figure>
</li>
<li><p>client访问</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">svn://<span class="title">xxx.xxx.xxx.xxx</span>/<span class="title">project</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>注意事项：<ol>
<li>svn默认端口3690是否开启，否则client连接阻塞，后报错</li>
<li>[user]下配置的用户名密码和等号间不要空格</li>
<li>authz配置用户/用户组访问权限，否则client报authentication failed</li>
</ol>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[protocol buffer]]></title>
      <url>/2017/05/12/protobuf-1/</url>
      <content type="html"><![CDATA[<p>protobuf在Windows环境下获取，编译器(c++ version)生成和一般使用方法。  </p>
<a id="more"></a>  
<ul>
<li><strong>Protocol Buffer</strong>  </li>
</ul>
<blockquote>
<p>Protocol Buffers (a.k.a., protobuf) are Google’s language-neutral, platform-neutral, extensible mechanism for serializing structured data. You can find protobuf’s documentation on the Google Developers site.  </p>
<p>To install protobuf, you need to install the protocol compiler (used to compile .proto files) and the protobuf runtime for your chosen programming language.</p>
</blockquote>
<p>项目地址 <a href="https://github.com/google/protobuf" target="_blank" rel="external">google/protobuf - github</a><br>依据README描述，需要做的是搞定compiler和runtime，其中compiler由C++实现，只有runtime提供各语言版本。<br>我的主要使用方式是Win/C++，关注<code>src</code>和<code>cmake</code>目录。<br>准备工具，<code>CMake</code>(<a href="https://cmake.org/download/" target="_blank" rel="external">下载</a>)和<code>Virtual Studio</code>  </p>
<blockquote>
<p>若只使用发布版本，可直接下载，参考protobuf项目<a href="https://github.com/google/protobuf/blob/master/src/README.md" target="_blank" rel="external">README</a>中的C++ Installation - Windows部分 ：</p>
<blockquote>
<p>C++ Installation - Windows<br>If you only need the protoc binary, you can download it from the release page:<br><a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">https://github.com/google/protobuf/releases</a><br>In the downloads section, download the zip file protoc-$VERSION-win32.zip. It contains the protoc binary as well as public proto files of protobuf library.<br>To build from source using Microsoft Visual C++, see cmake/README.md.<br>To build from source using Cygwin or MinGW, follow the Unix installation instructions, above.</p>
</blockquote>
</blockquote>
<ul>
<li><strong>compiler</strong>  </li>
</ul>
<p>建立安装目录<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span> 11.0\<span class="title">VC</span>\<span class="title">bin</span>\<span class="title">amd64</span>&gt;<span class="title">d</span>:</span></div><div class="line"><span class="title">D</span>:\&gt;<span class="title">cd</span> <span class="title">git</span>\<span class="title">protobuf</span></div><div class="line"><span class="title">D</span>:\<span class="title">git</span>\<span class="title">protobuf</span>&gt;<span class="title">mkdir</span> <span class="title">install</span></div></pre></td></tr></table></figure></p>
<p>gmock<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 不做unit test，所以不处理gmock模块，下一步生成工程文件时需添加命令选项</div><div class="line">-Dprotobuf_BUILD_TESTS=OFF</div></pre></td></tr></table></figure></p>
<p>生成Virtual Studio 2012(11.0)工程文件<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">D:\<span class="title">git</span>\<span class="title">protobuf</span>&gt;<span class="title">cd</span> ..\<span class="title">cmake</span></span></div><div class="line"><span class="title">D</span>:\<span class="title">git</span>\<span class="title">protobuf</span>\<span class="title">cmake</span>&gt;<span class="title">mkdir</span> <span class="title">build</span> &amp; <span class="title">cd</span> <span class="title">build</span></div><div class="line"><span class="title">D</span>:\<span class="title">git</span>\<span class="title">protobuf</span>\<span class="title">cmake</span>\<span class="title">build</span>&gt;<span class="title">mkdir</span> <span class="title">solution</span> &amp; <span class="title">cd</span> <span class="title">solution</span></div><div class="line"><span class="title">D</span>:\<span class="title">git</span>\<span class="title">protobuf</span>\<span class="title">cmake</span>\<span class="title">build</span>\<span class="title">solution</span>&gt;<span class="title">cmake</span> -<span class="title">G</span> "<span class="title">Visual</span> <span class="title">Studio</span> 11 2012 <span class="title">Win64</span>" -<span class="title">DCMAKE_INSTALL_PREFIX</span>=../../../../<span class="title">install</span> ../.. -<span class="title">Dprotobuf_BUILD_TESTS</span>=<span class="title">OFF</span></div></pre></td></tr></table></figure></p>
<p>至此，<code>solution</code>目录下已经生成vs 2012的工程文件。<br>下一步，编译protobuf源码</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript变量、数据类型]]></title>
      <url>/2017/05/11/javascript-1/</url>
      <content type="html"><![CDATA[<p><strong>一、变量</strong><br>ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。每个变量仅仅是一个用于保存值的占位符而已。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message_un;      <span class="comment">// 声明，但未初始化</span></div><div class="line"><span class="keyword">var</span> message = <span class="string">"hi"</span>;  <span class="comment">// 可在声明同时初始化</span></div><div class="line">message = <span class="number">100</span>;       <span class="comment">// 已有类型时，转其他类型。有效，但不推荐</span></div><div class="line"></div><div class="line"><span class="comment">// 下面这个变量并没有声明;</span></div><div class="line"><span class="comment">// var age;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">"hi"</span>;    <span class="comment">// 局部变量</span></div><div class="line">    b = <span class="string">"hello"</span>;     <span class="comment">// 全局变量</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> c = <span class="string">"name"</span>,  <span class="comment">// 可连续初始化多个变量类型，注意间隔逗号</span></div><div class="line">        d = <span class="literal">false</span>,</div><div class="line">        e = <span class="number">29</span>;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line">alert(a);                        <span class="comment">// 错误！</span></div><div class="line">alert(message_un);               <span class="comment">// 错误！</span></div><div class="line">alert(message_un == <span class="literal">undefined</span>);  <span class="comment">// true</span></div><div class="line">alert(b);                        <span class="comment">// "hello"</span></div><div class="line">alert(c);                        <span class="comment">// "name"</span></div><div class="line">alert(d);                        <span class="comment">// false</span></div><div class="line">alert(e);                        <span class="comment">//</span></div><div class="line">alert(age);                      <span class="comment">// 错误！</span></div></pre></td></tr></table></figure>
<p><strong>二、数据类型</strong><br>5种简单数据类型（基本数据类型）<br><code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code><br>1种复杂数据类型<br><code>Object</code>  </p>
<p><strong>Undefined</strong> 类型只有一个值，即特殊的undefined。在使用<code>var</code>声明变量但未对其加以初始化时，这个变量的值就是undefined，比如上面定义的<code>message_un</code>。<br><strong>Null</strong> 类型是第二个只有一个值的数据类型，这个特殊的值是<code>null</code>。从逻辑角度看，null值表示一个空对象指针，而这也正是<code>typeof null</code>会返回<code>object</code>的原因。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n1 = <span class="number">95</span>;</div><div class="line"><span class="keyword">var</span> car = <span class="literal">null</span>;</div><div class="line">alert(<span class="keyword">typeof</span> message_un);  <span class="comment">// "undefined"</span></div><div class="line">alert(<span class="keyword">typeof</span> age);         <span class="comment">// "undefined"</span></div><div class="line">alert(<span class="keyword">typeof</span> message);     <span class="comment">// "string"</span></div><div class="line">alert(<span class="keyword">typeof</span>(message));    <span class="comment">// "string"</span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="number">95</span>);          <span class="comment">// "number"</span></div><div class="line">alert(<span class="keyword">typeof</span>(n1));         <span class="comment">// "number"</span></div><div class="line">alert(<span class="keyword">typeof</span>(d));          <span class="comment">// "boolean"</span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">null</span>);        <span class="comment">// "object"</span></div><div class="line">alert(<span class="keyword">typeof</span> car);         <span class="comment">// "object"</span></div></pre></td></tr></table></figure>
<p>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为<code>null</code>而不是其他值。这样一来，只要直接检查null值就可以知道对应的变量是否已经保存了一个对象的引用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实际上undefined值是派生自null值的，因此相等性测试要返回true</span></div><div class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>);   <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>虽然<code>==</code>总是返回true，但仍需明确<code>undefined</code>和<code>null</code>的区别，二者用途完全不同。</p>
<ul>
<li>没必要把一个变量的值显式设置为undefined，因为不初始化时即为undefined</li>
<li>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值  </li>
</ul>
<p>这样做不仅体现null作为空对象指针的惯例，而且也有助于进一步区分undefined和null。</p>
<p><strong>Boolean</strong> 类型只有两个字面值true和false。这两个值与数字值不是一回事，true不一定等于1，false不一定等于0。ECMAScript中所有类型的值都有与这两个Boolean值等价的值。要转换，可以调用转型函数Boolean()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message = <span class="string">"hello world"</span>;</div><div class="line"><span class="keyword">var</span> messageAsBoolean = <span class="built_in">Boolean</span>(message);   <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>转换值取决于数据类型及其实际值，如下表  </p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">转换为true的值</th>
<th style="text-align:left">转换为false的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">false</td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left">任何非空字符串</td>
<td style="text-align:left">“”(空字符串)</td>
</tr>
<tr>
<td style="text-align:left">Number</td>
<td style="text-align:left">任何非零数字值(包括无穷大)</td>
<td style="text-align:left">0和NaN</td>
</tr>
<tr>
<td style="text-align:left">Object</td>
<td style="text-align:left">任何对象</td>
<td style="text-align:left">null</td>
</tr>
<tr>
<td style="text-align:left">Undefined</td>
<td style="text-align:left">n/a</td>
<td style="text-align:left">undefined</td>
</tr>
</tbody>
</table>
<p>　　<br>待续..</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寄存器-2]]></title>
      <url>/2017/04/13/huibianjichu-2/</url>
      <content type="html"><![CDATA[<p>复习：（CPU外部）<br>地址总线：能传输多少个不同的信息，CPU就可以对多少个存储单元进行寻址。<br>2^N （8086有20根地址总线）</p>
<a id="more"></a>
<p>数据总线</p>
<blockquote>
<p>数据总线的宽度决定了CPU与外界交换数据的速度。<br>8根数据总线一次可传递一个8位二进制数据，即1个字节，8088CPU数据总线宽度为8, 8086CPU宽度为16。</p>
</blockquote>
<p>控制总线</p>
<blockquote>
<p>是一些不同控制线的集合，有多少根，CPU就提供对外部器件的多少种控制。<br>比如内存读写命令，由其中一根”读信号输出”的控制线负责从CPU向外部输出读信号，同样，”写信号输出”控制心啊负责传送写信号。</p>
</blockquote>
<p>字节、字：字节长8位，记为<code>byte</code>；字长16位，记为<code>word</code></p>
<p>( end )</p>
<p>mov bx, 1000H<br>mov ds, bx<br>m0v al, [0]  </p>
<p>mov指令可以完成三种传送：</p>
<ol>
<li>将数据直接送入寄存器;</li>
<li>将一个寄存器的数据送入另一个寄存器;</li>
<li>将内存单元的数据送入寄存器;  </li>
</ol>
<p>[…]表示一个内存单元，”…”表示内存单元的偏移地址，执行指令时，8086CPU自动取ds中的数据为内存单元的段地址</p>
]]></content>
      
        <categories>
            
            <category> 汇编 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[寄存器-1]]></title>
      <url>/2017/04/13/huibianjichu-1/</url>
      <content type="html"><![CDATA[<p>8086CPU(16位)的寄存器</p>
<a id="more"></a>
<p>16位CPU有以下几方面的结构特性：</p>
<blockquote>
<ol>
<li>运算器一次最多可处理16位数据</li>
<li>寄存器的最大宽度为16位</li>
<li>寄存器和运算器之间的通路为16位</li>
</ol>
</blockquote>
<p>8086CPU的所有寄存器都是16位的，可以存放两个字节<br>8086CPU内部，能够一次性处理、传输、暂时存储的信息最大长度是16位的（内存单元的地址在送上地址总线之前）<br>8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力</p>
<table>
<thead>
<tr>
<th style="text-align:left">通用寄存器</th>
<th style="text-align:left">段寄存器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AX</td>
<td style="text-align:left">CS</td>
</tr>
<tr>
<td style="text-align:left">BX</td>
<td style="text-align:left">DS</td>
</tr>
<tr>
<td style="text-align:left">CX</td>
<td style="text-align:left">SS</td>
</tr>
<tr>
<td style="text-align:left">DX</td>
<td style="text-align:left">ES</td>
</tr>
</tbody>
</table>
<ul>
<li>当8086CPU要访问内存时由这4个段寄存器提供内存单元的段地址</li>
</ul>
<p>8086CPU物理地址的表示:<br>“段地址 * 16 + 偏移地址 = 物理地址”<br>“   基础地址  + 偏移地址 = 物理地址”<br>“        CS      :       IP “</p>
<p>CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地址</p>
<blockquote>
<p>CS：代码段寄存器<br>IP：指令指针寄存器  </p>
</blockquote>
<p>任意时刻，设CS中M，IP中N，8086CPU将从M*16+N单元开始，读取一条指令并执行<br>也可以这样表述：任意时刻，8086CPU取CS:IP指向的内容当做指令执行</p>
<p>8086CPU工作过程概要：</p>
<ol>
<li>从CS:IP内存单元读取指令，读取的指令进入指令缓冲器;  </li>
<li>IP = IP + Length(指令长度);  </li>
<li>执行指令;  </li>
<li>转到1继续执行  </li>
</ol>
<p>8086CPU加电或复位后(即CPU刚开始工作时)CS和IP被设置为CS = FFFFH，IP = 0000H，即在8086PC机启动时，CPU从内存FFFF0H单元中<br>读取指令，FFFF0H单元中的指令是8086PC机开机后执行的第一条指令</p>
<p>可以通过改变CS:IP中的内容来控制CPU执行目标指令</p>
<blockquote>
<p>mov：传送指令(可以修改大部分寄存器的值，但是不能用于设置CS、IP)</p>
</blockquote>
<p>能够修改CS、IP的指令统称为转移指令，例如jmp</p>
<blockquote>
<p>格式：”jmp 段地址:偏移地址”<br>功能：用指令中给出的段地址修改CS，偏移地址修改IP<br>例如：jmp 2AE3:3, 执行后CS = 2AE3H， IP = 0003H，CPU将从2AE33H处读取指令</p>
</blockquote>
<p>若单独修改IP内容，可用”jmp 某一合法寄存器”，功能为”用寄存器中的值修改IP”<br>例如：”jmp ax”</p>
<blockquote>
<p>执行前: ax = 1000H, CS = 2000H, IP = 0003H<br>执行后: ax = 1000H, CS = 2000H, IP = 1000H  </p>
</blockquote>
<p>其功能类似于”mov IP, ax”指令</p>
<p>关于代码段（16位8086PC机）<br>代码段长度≤64KB，因为偏移地址最大16位，16位寻址能力为64KB</p>
]]></content>
      
        <categories>
            
            <category> 汇编 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo常用命令参考]]></title>
      <url>/2017/04/13/command-ref/</url>
      <content type="html"><![CDATA[<p>Hexo安装，初始化，和常用命令。<br><a id="more"></a></p>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g            #安装</div><div class="line">hexo init                      #初始化</div><div class="line">hexo new [layout] &lt;<span class="built_in">title</span>&gt;      #新建</div></pre></td></tr></table></figure>
<h4 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo n "postName" == hexo new "postName"  #新建文章(default layout post)</div><div class="line">hexo p == hexo publish                    #发布草稿(_draft-&gt;_post)</div><div class="line">hexo g == hexo generate                   #生成</div><div class="line">hexo s == hexo server                     #启动服务预览</div><div class="line">hexo s -g == hexo server --generate       #启动服务预览前生成</div><div class="line">hexo d == hexo deploy                     #部署</div><div class="line">hexo d -g == hexo deploy --generate       #部署前生成</div><div class="line">hexo g -d == hexo d -g                    #部署前生成</div></pre></td></tr></table></figure>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo server                 #启动服务预览(默认端口<span class="number">4000</span>，Ctrl+C关闭)</div><div class="line">hexo server -s              #静态模式</div><div class="line">hexo server -p <span class="number">5000</span>         #更改端口</div><div class="line">hexo server -i <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">1</span>  #自定义IP</div><div class="line"></div><div class="line">hexo clean                  #清除缓存(网页正常情况下可以忽略此条命令)</div><div class="line">hexo generate               #生成静态网页至public目录</div><div class="line">hexo generate --watch       #监视文件变动</div><div class="line">hexo server --generate      #启动预览前生成</div><div class="line">hexo deploy                 #开始部署(将.deploy目录部署到GitHub)</div><div class="line">hexo deploy --generate      #部署前生成</div></pre></td></tr></table></figure>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;<span class="built_in">title</span>&gt;</div></pre></td></tr></table></figure>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo new "postName"</div><div class="line">hexo new page "pageName"</div><div class="line">hexo new photo "My Gallery"</div><div class="line">hexo new "Hello World" --lang tw</div></pre></td></tr></table></figure>
<h3 id="前置声明"><a href="#前置声明" class="headerlink" title="前置声明"></a>前置声明</h3><ul>
<li><code>title:</code> 标题，必须</li>
<li><code>date:</code> 创建时间</li>
<li><code>updated:</code> 修改时间</li>
<li><code>description:</code> 首页文章列表中显示概要</li>
<li><code>comments:</code> 是否开启评论(true/false)</li>
<li><code>tags:</code> 文章标签(支持多级)</li>
<li><code>categories:</code> 文章分类(支持多级)</li>
<li><code>toc:</code> 是否显示文章目录结构(true/false)  </li>
</ul>
<p>多级分类示例<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">categories:</span></div><div class="line">- <span class="title">Sports</span></div><div class="line">- <span class="title">Baseball</span></div><div class="line"><span class="title">tags</span>:</div><div class="line">- <span class="title">Injury</span></div><div class="line">- <span class="title">Fight</span></div><div class="line">- <span class="title">Shocking</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Guides </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Syntax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Syntax Demo]]></title>
      <url>/2017/04/13/syntax-demo/</url>
      <content type="html"><![CDATA[<h2 id="Welcome-to-GitHub-Pages"><a href="#Welcome-to-GitHub-Pages" class="headerlink" title="Welcome to GitHub Pages"></a>Welcome to GitHub Pages</h2><p>You can use the <a href="https://github.com/vtmain/vtmain.github.io/edit/master/README.md" target="_blank" rel="external">editor on GitHub</a> to maintain and preview the content for your website in Markdown files.</p>
<a id="more"></a>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for Syntax highlighted code block</p>
<p>Text can be <strong>bold</strong>, <em>italic</em>, or <del>strikethrough</del>.</p>
<p><a href="https://github.com" target="_blank" rel="external">Link to another page(GitHub)</a>.</p>
<p>There should be whitespace between paragraphs.</p>
<p>We recommend including a README, or a file with information about your project.</p>
<h1 id="Header-1"><a href="#Header-1" class="headerlink" title="Header 1"></a><a href="#header-1"></a>Header 1</h1><p>This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.</p>
<h2 id="Header-2"><a href="#Header-2" class="headerlink" title="Header 2"></a><a href="#header-2"></a>Header 2</h2><blockquote>
<p>This is a blockquote following a header.</p>
<p>When something is important enough, you do it even if the odds are not in your favor.</p>
</blockquote>
<h3 id="Header-3"><a href="#Header-3" class="headerlink" title="Header 3"></a><a href="#header-3"></a>Header 3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Javascript code with syntax highlighting.</span></div><div class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> <span class="title">lang</span>(<span class="params">l</span>) </span>&#123;</div><div class="line">  dateformat.i18n = <span class="built_in">require</span>(<span class="string">'./lang/'</span> + l)</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Ruby code with syntax highlighting</span></div><div class="line">GitHubPages::Dependencies.gems.each <span class="keyword">do</span> <span class="params">|gem, version|</span></div><div class="line">  s.add_dependency(gem, <span class="string">"= <span class="subst">#&#123;version&#125;</span>"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h4 id="Header-4"><a href="#Header-4" class="headerlink" title="Header 4"></a><a href="#header-4"></a>Header 4</h4><ul>
<li>This is an unordered list following a header.</li>
<li>This is an unordered list following a header.</li>
<li>This is an unordered list following a header.</li>
</ul>
<h5 id="Header-5"><a href="#Header-5" class="headerlink" title="Header 5"></a><a href="#header-5"></a>Header 5</h5><ol>
<li>This is an ordered list following a header.</li>
<li>This is an ordered list following a header.</li>
<li>This is an ordered list following a header.</li>
</ol>
<h6 id="Header-6"><a href="#Header-6" class="headerlink" title="Header 6"></a><a href="#header-6"></a>Header 6</h6><table>
<thead>
<tr>
<th style="text-align:left">head1</th>
<th style="text-align:left">head two</th>
<th style="text-align:left">three</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ok</td>
<td style="text-align:left">good swedish fish</td>
<td style="text-align:left">nice</td>
</tr>
<tr>
<td style="text-align:left">out of stock</td>
<td style="text-align:left">good and plenty</td>
<td style="text-align:left">nice</td>
</tr>
<tr>
<td style="text-align:left">ok</td>
<td style="text-align:left">good <code>oreos</code></td>
<td style="text-align:left">hmm</td>
</tr>
<tr>
<td style="text-align:left">ok</td>
<td style="text-align:left">good <code>zoute</code> drop</td>
<td style="text-align:left">yumm</td>
</tr>
</tbody>
</table>
<h3 id="There’s-a-horizontal-rule-below-this"><a href="#There’s-a-horizontal-rule-below-this" class="headerlink" title="There’s a horizontal rule below this."></a>There’s a horizontal rule below this.</h3><hr>
<h3 id="Here-is-an-unordered-list"><a href="#Here-is-an-unordered-list" class="headerlink" title="Here is an unordered list:"></a>Here is an unordered list:</h3><ul>
<li>Item foo</li>
<li>Item bar</li>
<li>Item baz</li>
<li>Item zip</li>
</ul>
<h3 id="And-an-ordered-list"><a href="#And-an-ordered-list" class="headerlink" title="And an ordered list:"></a>And an ordered list:</h3><ol>
<li>Item one</li>
<li>Item two</li>
<li>Item three</li>
<li>Item four</li>
</ol>
<h3 id="And-a-nested-list"><a href="#And-a-nested-list" class="headerlink" title="And a nested list:"></a>And a nested list:</h3><ul>
<li>level 1 item<ul>
<li>level 2 item</li>
<li>level 2 item<ul>
<li>level 3 item</li>
<li>level 3 item</li>
</ul>
</li>
</ul>
</li>
<li>level 1 item<ul>
<li>level 2 item</li>
<li>level 2 item</li>
<li>level 2 item</li>
</ul>
</li>
<li>level 1 item<ul>
<li>level 2 item</li>
<li>level 2 item</li>
</ul>
</li>
<li>level 1 item</li>
</ul>
<h3 id="Small-image"><a href="#Small-image" class="headerlink" title="Small image"></a>Small image</h3><p><img src="https://assets-cdn.github.com/images/icons/emoji/octocat.png" alt=""></p>
<h3 id="Large-image"><a href="#Large-image" class="headerlink" title="Large image"></a>Large image</h3><p><img src="https://guides.github.com/activities/hello-world/branching.png" alt=""></p>
<h3 id="Definition-lists-can-be-used-with-HTML-syntax"><a href="#Definition-lists-can-be-used-with-HTML-syntax" class="headerlink" title="Definition lists can be used with HTML syntax."></a>Definition lists can be used with HTML syntax.</h3><dl><br><dt>Name</dt><br><dd>Godzilla</dd><br><dt>Born</dt><br><dd>1952</dd><br><dt>Birthplace</dt><br><dd>Japan</dd><br><dt>Color</dt><br><dd>Green</dd><br></dl>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The final element.</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Guides </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Syntax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Guides </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
